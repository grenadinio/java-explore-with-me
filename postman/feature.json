{
  "info": {
    "_postman_id": "9dcec678-ee34-40c0-a1b5-196a0b1ce91f",
    "name": "EWM - Comments Feature",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "28596675"
  },
  "item": [
    {
      "name": "PrivateFeatures",
      "item": [
        {
          "name": "Добавление нового комментария",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    let comment;\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"userId\", user.id)\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        pm.collectionVariables.set(\"eventId\", event.id);\r",
                  "        comment = rnd.getComment();\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "\r",
                  "    pm.request.body.update({\r",
                  "        mode: 'raw',\r",
                  "        raw: JSON.stringify(comment),\r",
                  "        options: { raw: { language: 'json' } }\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(201);  \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Комментарий должен содержать поля: id, text, publishedOn, userId, eventId\", function () {\r",
                  "    pm.expect(target).to.have.property('id');\r",
                  "    pm.expect(target).to.have.property('text');\r",
                  "    pm.expect(target).to.have.property('publishedOn');\r",
                  "    pm.expect(target).to.have.property('userId');\r",
                  "    pm.expect(target).to.have.property('eventId');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(target.content).equal(source.content, 'Содержание комментария должно соответствовать содержанию комментария в запросе');\r",
                  "    pm.expect(target.created).to.not.be.null;\r",
                  "    pm.expect(target.userId).equal(Number(pm.variables.get(\"userId\")), 'id пользователя в комментарии должно соответствовать id пользователя в url');\r",
                  "    pm.expect(target.eventId).equal(Number(pm.variables.get(\"eventId\")), 'id события в комментарии должно соответствовать id события в url');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/events/:eventId/comments?userId={{userId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":eventId",
                "comments"
              ],
              "query": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{eventId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление нового комментария с пустым содержанием",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    let comment;\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"userId\", user.id)\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        pm.collectionVariables.set(\"eventId\", event.id);\r",
                  "        comment = rnd.getComment();\r",
                  "        delete comment[\"text\"];\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "\r",
                  "    pm.request.body.update({\r",
                  "        mode: 'raw',\r",
                  "        raw: JSON.stringify(comment),\r",
                  "        options: { raw: { language: 'json' } }\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.badRequest;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/events/:eventId/comments?userId={{userId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":eventId",
                "comments"
              ],
              "query": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{eventId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление нового комментария с пробелами вместо текста",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    let comment;\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"userId\", user.id)\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        pm.collectionVariables.set(\"eventId\", event.id);\r",
                  "        comment = rnd.getComment();\r",
                  "        comment[\"text\"] = '                     ';\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "\r",
                  "    pm.request.body.update({\r",
                  "        mode: 'raw',\r",
                  "        raw: JSON.stringify(comment),\r",
                  "        options: { raw: { language: 'json' } }\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.badRequest;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/events/:eventId/comments?userId={{userId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":eventId",
                "comments"
              ],
              "query": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{eventId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Изменение комментария",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    let comment;\r",
                  "    let comment2\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        comment = await api.addComment(rnd.getComment(), user.id, event.id);\r",
                  "        comment2 = await rnd.getComment();\r",
                  "        pm.collectionVariables.set(\"userId\", user.id);\r",
                  "        pm.collectionVariables.set(\"eventId\", event.id);\r",
                  "        pm.collectionVariables.set(\"commentId\", comment.id);\r",
                  "        pm.collectionVariables.set(\"response\", comment2);\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "\r",
                  "    pm.request.body.update({\r",
                  "        mode: 'raw',\r",
                  "        raw: comment2,\r",
                  "        options: { raw: { language: 'json' } }\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = pm.collectionVariables.get(\"response\");\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "\r",
                  "pm.test(\"Комментарий должен содержать поля: id, text, publishedOn, userId, eventId\", function () {\r",
                  "    pm.expect(target).to.have.property('id');\r",
                  "    pm.expect(target).to.have.property('text');\r",
                  "    pm.expect(target).to.have.property('publishedOn');\r",
                  "    pm.expect(target).to.have.property('userId');\r",
                  "    pm.expect(target).to.have.property('eventId');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target.content).equal(source.content, 'Содержание комментария должно соответствовать содержанию комментария в запросе');\r",
                  "    pm.expect(target.created).to.not.be.null;\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/events/:eventId/comments/:commentId?userId={{userId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":eventId",
                "comments",
                ":commentId"
              ],
              "query": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{eventId}}"
                },
                {
                  "key": "commentId",
                  "value": "{{commentId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление комментария",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const comment = await api.addComment(rnd.getComment(), user.id, event.id);\r",
                  "        pm.collectionVariables.set(\"userId\", user.id);\r",
                  "        pm.collectionVariables.set(\"eventId\", event.id);\r",
                  "        pm.collectionVariables.set(\"commentId\", comment.id);\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
                  "    pm.response.to.have.status(204);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/:eventId/comments/:commentId?userId={{userId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":eventId",
                "comments",
                ":commentId"
              ],
              "query": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{eventId}}"
                },
                {
                  "key": "commentId",
                  "value": "{{commentId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление несуществующего комментария",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const comment = await api.addComment(rnd.getComment(), user.id, event.id);\r",
                  "        pm.collectionVariables.set(\"userId\", user.id);\r",
                  "        pm.collectionVariables.set(\"eventId\", event.id);\r",
                  "        pm.collectionVariables.set(\"commentId\", comment.id+1);\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/:eventId/comments/:commentId?userId={{userId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":eventId",
                "comments",
                ":commentId"
              ],
              "query": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{eventId}}"
                },
                {
                  "key": "commentId",
                  "value": "{{commentId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление чужого комментария",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const comment = await api.addComment(rnd.getComment(), user.id, event.id);\r",
                  "        pm.collectionVariables.set(\"userId\", user.id-1);\r",
                  "        pm.collectionVariables.set(\"eventId\", event.id);\r",
                  "        pm.collectionVariables.set(\"commentId\", comment.id);\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 403\", function () {\r",
                  "    pm.response.to.have.status(403);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/:eventId/comments/:commentId?userId={{userId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":eventId",
                "comments",
                ":commentId"
              ],
              "query": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{eventId}}"
                },
                {
                  "key": "commentId",
                  "value": "{{commentId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление комментария не в том ивенте",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const comment = await api.addComment(rnd.getComment(), user.id, event.id);\r",
                  "        pm.collectionVariables.set(\"userId\", user.id);\r",
                  "        pm.collectionVariables.set(\"eventId\", event.id-1);\r",
                  "        pm.collectionVariables.set(\"commentId\", comment.id);\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
                  "    pm.response.to.have.status(409);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/:eventId/comments/:commentId?userId={{userId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":eventId",
                "comments",
                ":commentId"
              ],
              "query": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{eventId}}"
                },
                {
                  "key": "commentId",
                  "value": "{{commentId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение всех комментариев у события",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        comment = await api.addComment(rnd.getComment(), user.id, event.id);\r",
                  "        pm.collectionVariables.set(\"eventId\", event.id);\r",
                  "        pm.collectionVariables.set(\"response\", comment);\r",
                  "        pm.collectionVariables.set(\"response\", comment);\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = pm.collectionVariables.get('response');\r",
                  "const target = pm.response.json();\r",
                  "let founded;\r",
                  "target.forEach(function(element){if (element.id == source.id) founded = element});\r",
                  "\r",
                  "pm.test(\"Комментарий должен содержать поля: id, text, publishedOn, userId, eventId\", function () {\r",
                  "    pm.expect(target[0]).to.have.property('id');\r",
                  "    pm.expect(target[0]).to.have.property('text');\r",
                  "    pm.expect(target[0]).to.have.property('publishedOn');\r",
                  "    pm.expect(target[0]).to.have.property('userId');\r",
                  "    pm.expect(target[0]).to.have.property('eventId');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target[0].id).to.not.be.null;\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/:eventId/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":eventId",
                "comments"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{eventId}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "AdminFeatures",
      "item": [
        {
          "name": "Админ изменение комментария",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    let comment;\r",
                  "    let comment2\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        comment = await api.addComment(rnd.getComment(), user.id, event.id);\r",
                  "        comment2 = await rnd.getComment();\r",
                  "        pm.collectionVariables.set(\"eventId\", event.id);\r",
                  "        pm.collectionVariables.set(\"commentId\", comment.id);\r",
                  "        pm.collectionVariables.set(\"response\", comment2);\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "\r",
                  "    pm.request.body.update({\r",
                  "        mode: 'raw',\r",
                  "        raw: comment2,\r",
                  "        options: { raw: { language: 'json' } }\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = pm.collectionVariables.get(\"response\");\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "\r",
                  "pm.test(\"Комментарий должен содержать поля: id, text, publishedOn, userId, eventId\", function () {\r",
                  "    pm.expect(target).to.have.property('id');\r",
                  "    pm.expect(target).to.have.property('text');\r",
                  "    pm.expect(target).to.have.property('publishedOn');\r",
                  "    pm.expect(target).to.have.property('userId');\r",
                  "    pm.expect(target).to.have.property('eventId');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target.content).equal(source.content, 'Содержание комментария должно соответствовать содержанию комментария в запросе');\r",
                  "    pm.expect(target.created).to.not.be.null;\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/events/:eventId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "events",
                ":eventId",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{eventId}}"
                },
                {
                  "key": "commentId",
                  "value": "{{commentId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Админ удаление комментария",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const comment = await api.addComment(rnd.getComment(), user.id, event.id);\r",
                  "        pm.collectionVariables.set(\"eventId\", event.id);\r",
                  "        pm.collectionVariables.set(\"commentId\", comment.id);\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
                  "    pm.response.to.have.status(204);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/events/:eventId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "events",
                ":eventId",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{eventId}}"
                },
                {
                  "key": "commentId",
                  "value": "{{commentId}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          "API = class {\r",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
          "        this.baseUrl = baseUrl;\r",
          "        this.pm = postman;\r",
          "        this._verbose = verbose;\r",
          "    }\r",
          "\r",
          "    async addUser(user, verbose=null) {\r",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
          "    }\r",
          "\r",
          "    async addCategory(category, verbose=null) {\r",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
          "    }\r",
          "\r",
          "    async addEvent(userId, event, verbose=null) {\r",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
          "    }\r",
          "\r",
          "    async addComment(comment, userId, eventId, verbose=null) {\r",
          "        return this.post(\"/events/\" + eventId + \"/comments?userId=\" + userId , comment, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
          "    }\r",
          "\r",
          "    async publishEvent(eventId, verbose=null) {\r",
          "        return this.patch(\"/admin/events/\" + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);\r",
          "    }\r",
          "\r",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
          "    }\r",
          "\r",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
          "    }\r",
          "\r",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
          "    }\r",
          "\r",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
          "        return new Promise((resolve, reject) => {\r",
          "            verbose = verbose == null ? this._verbose : verbose;\r",
          "            const request = {\r",
          "                url: this.baseUrl + path,\r",
          "                method: method,\r",
          "                body: body == null ? \"\" : JSON.stringify(body),\r",
          "                header: { \"Content-Type\": \"application/json\" },\r",
          "            };\r",
          "            if(verbose) {\r",
          "                console.log(\"Отправляю запрос: \", request);\r",
          "            }\r",
          "\r",
          "            try {\r",
          "                this.pm.sendRequest(request, (error, response) => {\r",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
          "                        let err = error ? error : JSON.stringify(response.json());\r",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
          "\r",
          "                        reject(new Error(errorText + err));\r",
          "                    }\r",
          "                    if(verbose) {\r",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
          "                    }\r",
          "                    if (response.stream.length === 0){\r",
          "                        reject(new Error('Отправлено пустое тело ответа'))\r",
          "                    }else{\r",
          "                        resolve(response.json());\r",
          "                    }\r",
          "                });\r",
          "                \r",
          "            } catch(err) {\r",
          "                if(verbose) {\r",
          "                    console.error(errorText, err);\r",
          "                }\r",
          "                return Promise.reject(err);\r",
          "            }\r",
          "        });\r",
          "    }\r",
          "};\r",
          "\r",
          "RandomUtils = class {\r",
          "    constructor() {}\r",
          "\r",
          "    getComment() {\r",
          "        return {\r",
          "            text: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50)\r",
          "        };\r",
          "    }\r",
          "\r",
          "    getUser() {\r",
          "        return {\r",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
          "        };\r",
          "    }\r",
          "\r",
          "    getCategory() {\r",
          "        return {\r",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
          "        };\r",
          "    }\r",
          "\r",
          "    getEvent(categoryId) {\r",
          "        return {\r",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
          "            category: categoryId,\r",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
          "            eventDate: this.getFutureDateTime(),\r",
          "            location: {\r",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
          "            },\r",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
          "        }\r",
          "    }\r",
          "\r",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
          "        let moment = require('moment');\r",
          "\r",
          "        let m = moment();\r",
          "        m.add(hourShift, 'hour');\r",
          "        m.add(minuteShift, 'minute');\r",
          "        m.add(yearShift, 'year');\r",
          "\r",
          "        return m.format('YYYY-MM-DD HH:mm:ss');\r",
          "    }\r",
          "\r",
          "    getWord(length = 1) {\r",
          "        let result = '';\r",
          "        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
          "        const charactersLength = characters.length;\r",
          "        let counter = 0;\r",
          "        while (counter < length) {\r",
          "            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
          "            counter += 1;\r",
          "        }\r",
          "        return result;\r",
          "    }\r",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "eventId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "commentId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "request_body",
      "value": "",
      "type": "string"
    },
    {
      "key": "response",
      "value": "",
      "type": "string"
    }
  ]
}